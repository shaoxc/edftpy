{
	"JOB": {
		"comment": {
			"type": "str",
			"default": "Control of the running job."
		},
		"task": {
			"type": "cstr",
			"default": "Optdensity",
			"comment": "The task to be performed.",
			"options": "Optdensity, Calculation, Tddft"
		},
		"calctype": {
			"type": "cstrlist",
			"default": "Energy",
			"comment": "The property to be calculated.",
			"options": "Energy, Potential, Force, Stress"
		}
	},
	"PATH": {
		"comment": {
			"type": "str",
			"default": "Specify the path of needed files."
		},
		"pp": {
			"comment": "The path of pseudopotential.",
			"options": "",
			"type": "str",
			"default": "./"
		},
		"cell": {
			"comment": "The path of input structure.",
			"options": "",
			"type": "str",
			"default": "./"
		}
	},
	"MATH": {
		"dftpy": {
			"type": "str",
			"default": "math",
			"comment": "twostep, multistep, reuse"
		}
	},
	"PP": {
		"comment": "Control of the running job.",
		"example": "Al = Al_lda.oe01.recpot",
		"type": "cdict",
		"default": {}
	},
	"OUTPUT": {
		"comment": {
			"type": "str",
			"default": "Control the output."
		},
		"dftpy": {
			"type": "str",
			"default": "output",
			"comment": "stress"
		},
		"electrostatic_potential": {
			"type": "str",
			"default": null,
			"comment": "Output of electrostatic_potential"
		}
	},
	"OPT": {
		"comment": {
			"type": "str",
			"default": "Control the charge density optimization of global system."
		},
		"method": {
			"type": "str",
			"options": "Normal",
			"default": "Normal",
			"comment": "Charge density optimization method"
		},
		"econv": {
			"type": "float",
			"default": 1e-05,
			"comment": "Convergence threshold for energy, it will divided by the number of atoms.",
			"unit": "a.u./atom"
		},
		"pconv": {
			"type": "float",
			"default": null,
			"comment": "Convergence threshold for potential. Default is 'econv'/1E2.",
			"unit": "a.u/atom"
		},
		"maxiter": {
			"type": "int",
			"default": 100,
			"comment": "The max steps for optimization"
		},
		"ncheck": {
			"type": "int",
			"comment": "How many step satisfy the convergence",
			"default": 2
		},
		"olevel": {
			"type": "int",
			"comment": "The level of output energy, large will faster.",
			"note": "Only set 0, the energy of each cycle is useful",
			"default": 2
		},
		"sdft": {
			"type": "str",
			"options": "sdft, pdft",
			"comment": "Subsytem DFT or Partition DFT",
			"default": "sdft"
		}
	},
	"TD": {
		"comment": {
			"type": "str",
			"default": "Control the TDDFT."
		},
		"maxiter": {
			"type": "int",
			"default": 1000,
			"comment": "The max steps for TDDFT"
		},
		"olevel": {
			"type": "int",
			"comment": "The level of output energy, large will faster.",
			"note": "Only set 0, the energy of each cycle is useful",
			"default": 2
		},
		"sdft": {
			"type": "str",
			"options": "sdft, pdft",
			"comment": "Subsytem DFT or Partition DFT",
			"default": "sdft"
		},
		"restart": {
			"type": "str",
			"options": "initial, scf, restart",
			"comment": "Start the job from new one, scf results or restart from previous run",
			"default": "initial"
		},
		"timestep": {
			"type": "float",
			"options": "",
			"comment": "The time step for TDDFT (fs)",
			"default": "1"
		}
	},
	"GSYSTEM": {
		"cell": {
			"dftpy": {
				"type": "str",
				"default": "cell",
				"comment": "cellfile"
			},
			"file": {
				"type": "str",
				"default": "POSCAR"
			}
		},
		"grid": {
			"dftpy": {
				"type": "str",
				"default": "grid"
			},
			"optfft": {
				"type": "bool",
				"default": true,
				"comment": "Optimize the number of grid points"
			}
		},
		"density": {
			"comment": {
				"type": "str",
				"default": "Control the charge density."
			},
			"nspin": {
				"comment": "non/spin-polarized calculation",
				"options": "1, 2",
				"type": "int",
				"default": 1
			},
			"ncharge": {
				"type": "float",
				"comment": "Total charge of the system",
				"default": null
			},
			"magmom": {
				"type": "float",
				"comment": "Total electronic magnetization.",
				"default": 0
			},
			"file": {
				"type": "str",
				"options": "",
				"comment": "The input density file for initial density",
				"default": null
			},
			"output": {
				"type": "str",
				"options": "",
				"comment": "The output file or format of density. The name starts with '.' represent the format.",
				"default": null
			}
		},
		"exc": {
			"dftpy": {
				"type": "str",
				"default": "exc"
			},
			"xc": {
				"type": "str",
				"default": null
			},
			"x_str": {
				"type": "str",
				"default": "lda_x"
			},
			"c_str": {
				"type": "str",
				"default": "lda_c_pz"
			}
		},
		"kedf": {
			"dftpy": {
				"type": "str",
				"default": "kedf"
			},
			"kedf": {
				"type": "str",
				"default": "GGA"
			},
			"interp": {
				"type": "str",
				"default": "linear"
			},
			"delta": {
				"type": "float",
				"default": 0.3
			},
			"kdd": {
				"type": "int",
				"default": 1
			},
			"k_str": {
				"type": "str",
				"default": "revAPBEK"
			}
		}
	},
	"SUB": {
		"cell": {
			"comment": {
				"type": "str",
				"default": "Structure information of system.",
				"note": "Subsytem(`SUB`_) use :ref:`cell-index<cell-index>` to define the atoms in the subsytem"
			},
			"dftpy": {
				"type": "str",
				"default": "cell",
				"comment": "cellfile"
			},
			"file": {
				"type": "str",
				"comment": "The file name of input structure. ",
				"default": null
			},
			"split": {
				"type": "floatlist",
				"comment": "Cut small cell for each direction (scaled).",
				"default": null
			},
			"cut": {
				"type": "floatlist",
				"comment": "Base on the subsystem atoms build the small cell, and add the vaccum on each direction. 0 means use whole cell.",
				"default": 0
			},
			"index": {
				"type": "intlist",
				"default": null,
				"comment": "The indices of the atoms, support integer and slice.",
				"note": "If not only a slice, you should given the stop for the slice."
			}
		},
		"grid": {
			"comment": {
				"type": "str",
				"default": "Control the grid."
			},
			"dftpy": {
				"type": "str",
				"default": "grid"
			},
			"ecut": {
				"type": "float",
				"default": null
			},
			"optfft": {
				"type": "bool",
				"default": true,
				"comment": "Optimize the number of grid points"
			}
		},
		"density": {
			"comment": {
				"type": "str",
				"default": "Control the charge density."
			},
			"nspin": {
				"comment": "non/spin-polarized calculation",
				"options": "1, 2",
				"type": "int",
				"default": 1
			},
			"ncharge": {
				"type": "float",
				"comment": "Total charge of the system",
				"default": null
			},
			"magmom": {
				"type": "float",
				"comment": "Total electronic magnetization.",
				"default": 0
			},
			"file": {
				"type": "str",
				"options": "",
				"comment": "The input density file for initial density",
				"default": null
			},
			"output": {
				"type": "str",
				"options": "",
				"comment": "The output file or format of density. The name starts with '.' represent the format.",
				"default": null
			},
			"initial": {
				"type": "cstr",
				"default": null,
				"options": "None, Atomic, Read, Ofdft, Heg",
				"comment": "For OFDFT subsystem must given one method except `None`."
			},
			"atomic": {
				"comment": "If `initial` set the Atomic, here need give each elements atomic density",
				"type": "cdict",
				"default": {}
			},
			"use_gaussians": {
				"type": "bool",
				"default": false,
				"options": "True, False",
				"comment": " It will replaces the core densities of the surrounding fragments with a gaussian. This is to avoid problems of electrons leaking in the core region of surrounding fragments when hard pseudopotentials are employed."
			},
			"gaussians_rcut": {
				"type": "float",
				"default": 3,
				"options": "",
				"comment": "The cutoff of distance.",
				"unit": "Angstrom"
			},
			"gaussians_sigma": {
				"options": "",
				"comment": "The sigma of gaussians.",
				"type": "float",
				"default": 0.3
			},
			"gaussians_scale": {
				"options": "",
				"comment": "The scale of each elements. If not set, will use the number of core electrons.",
				"type": "cdict",
				"default": {}
			}
		},
		"exc": {
			"comment": {
				"type": "str",
				"default": "Control the exchange-correlation functional."
			},
			"dftpy": {
				"type": "str",
				"default": "exc"
			},
			"xc": {
				"type": "str",
				"default": null
			},
			"x_str": {
				"type": "str",
				"default": null
			},
			"c_str": {
				"type": "str",
				"default": null
			}
		},
		"kedf": {
			"dftpy": {
				"type": "str",
				"default": "kedf"
			}
		},
		"decompose": {
			"comment": {
				"type": "str",
				"default": "The way to decompose the subsytem to more subsytems"
			},
			"method": {
				"type": "str",
				"default": "manual",
				"comment": "'manual' means use the given subsystem; 'distance' means base on the distance of atoms to decompose the subsytem.",
				"options": "manual, distance"
			},
			"adaptive": {
				"type": "str",
				"default": "manual",
				"comment": "The decompose method after first step, 'manual' will remove all 'NSUB'",
				"options": "manual, distance"
			},
			"rcut": {
				"type": "float",
				"default": 3,
				"comment": "The cutoff for decompose the subsytems.",
				"unit": "Angstrom"
			},
			"radius": {
				"type": "cfdict",
				"default": {},
				"comment": "The radius of each elements for decompose the subsytems.",
				"unit": "Angstrom"
			}
		},
		"mix": {
			"comment": {
				"type": "str",
				"default": "Control the charge density mixing."
			},
			"scheme": {
				"type": "str",
				"default": null,
				"comment": "Density mixing scheme, default is with driver's own scheme.",
				"options": "Pulay, Linear"
			},
			"predtype": {
				"type": "str",
				"comment": "The preconditioning method",
				"options": "kerker, inverse_kerker, resta",
				"default": "kerker"
			},
			"predcoef": {
				"type": "floatlist",
				"comment": "The parameters for preconditioning",
				"options": "",
				"default": "1.0 1.0 1.0"
			},
			"predecut": {
				"type": "float",
				"comment": "The preconditioning energy cutoff.",
				"options": "",
				"default": null
			},
			"maxm": {
				"type": "int",
				"comment": "Maximum of iterations used for mixing.",
				"options": "",
				"default": 7
			},
			"coef": {
				"type": "float",
				"comment": "",
				"options": "The mixing parameter.",
				"default": "0.5"
			},
			"delay": {
				"type": "int",
				"comment": "Delay several step to mixing the density",
				"options": "",
				"default": "2"
			},
			"restarted": {
				"type": "bool",
				"comment": "Restart the mixer after several step.",
				"options": "True, False",
				"default": false
			},
			"kf": {
				"type": "str",
				"comment": "Similar as predcoef, not use now.",
				"options": "",
				"default": "auto"
			}
		},
		"opt": {
			"comment": {
				"type": "str",
				"default": "Control the charge density optimization for subsytem."
			},
			"dftpy": {
				"type": "str",
				"default": "opt"
			},
			"opt_method": {
				"type": "str",
				"default": "full"
			},
			"maxiter": {
				"type": "int",
				"default": 800
			}
		},
		"kpoints": {
			"comment": {
				"type": "str",
				"default": "Set the kpoints for subsytem."
			},
			"method": {
				"type": "str",
				"options": "",
				"comment": "The method for generate the kpoints",
				"default": "auto"
			},
			"grid": {
				"type": "intlist",
				"options": "",
				"comment": "The grid of kpoints",
				"default": null
			},
			"offset": {
				"type": "floatlist",
				"options": "",
				"comment": "The offset of kpoints",
				"default": null
			}
		},
		"subs": {
			"type": "strlist",
			"default": null,
			"comment": "The name of all subsystems in this subsystem"
		},
		"calculator": {
			"type": "str",
			"default": "dftpy",
			"comment": "The SCF driver of subsystem",
			"options": "dftpy, castep, qe"
		},
		"technique": {
			"type": "str",
			"default": "OF",
			"comment": "The technique (OF|KS) of the driver"
		},
		"nprocs": {
			"type": "float",
			"default": 1,
			"comment": "The number of processors for the subsystem",
			"note": "If the minimum of all subsystems is 1, can also be used as ratio of number os processors of each subsystem"
		},
		"embed": {
			"type": "strlist",
			"default": "KE  XC",
			"comment": "The embedding potential",
			"options": "KE, XC"
		},
		"exttype": {
			"type": "int",
			"options": "0, 1,..., 7",
			"comment": "The embeded potential type, which is same as `embed`.",
			"default": null
		},
		"basefile": {
			"type": "str",
			"options": "",
			"comment": "The base input file for subsytem",
			"default": null
		},
		"prefix": {
			"type": "str",
			"options": "",
			"comment": "The prefix of each subsystem. If not set, it's same as the name of subsytem.",
			"default": null
		}
	}
}
