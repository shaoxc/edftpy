#!/usr/bin/env python3
import os
os.environ["PYTHONUNBUFFERED"] = "1"
os.environ["DFTPY_SAVEFFT"] = "1"
# import dftpy.constants
# dftpy.constants.SAVEFFT = True

import argparse
from edftpy.interface import optimize_density_conf, config2optimizer, get_forces
from edftpy.config import read_conf, print_conf
import time
from dftpy.time_data import TimeData
from dftpy.formats.io import read, read_density, write


def RunJob():
    parser = argparse.ArgumentParser(description='Process task')

    parser.add_argument('-i', '--ini', '--input', dest='input', type=str, action='store',
            default='config.ini', help='input file (default: config.ini)')

    args = parser.parse_args()
    config = read_conf(args.input)
    print_conf(config)

    print("Begin on :", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    print("#" * 80)
    TimeData.Begin("TOTAL")

    optimizer = optimize_density_conf(config)

    TimeData.End("TOTAL")
    TimeData.output(config)
    #-----------------------------------------------------------------------
    if config["GSYSTEM"]["density"]['output']:
        print("Write Density...")
        outfile = config["GSYSTEM"]["density"]['output']
        write(outfile, optimizer.density, ions = optimizer.gsystem.ions)
    if config["OUTPUT"]["electrostatic_potential"]:
        print("Write electrostatic potential...")
        outfile = config["OUTPUT"]["electrostatic_potential"]
        vloc = optimizer.gsystem.total_evaluator.funcdicts['PSEUDO']
        vhart = optimizer.gsystem.total_evaluator.funcdicts['HARTREE']
        v = vloc(optimizer.density, calcType = ['V']).potential + vhart(optimizer.density, calcType = ['V']).potential
        write(outfile, v, ions = optimizer.gsystem.ions)
    #-----------------------------------------------------------------------
    print("#" * 80)
    print("Finished on :", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    # for key in config :
        # if key.startswith('SUB'):
            # config[key]['opt']['opt_method'] = 'hamiltonian'
    # config['OPT']['maxiter'] = 10
    # optimizer = config2optimizer(config, optimizer.gsystem.ions, optimizer)
    # optimizer.optimize()
    # TimeData.End("TOTAL")
    # TimeData.output(config)


if __name__ == "__main__":
    RunJob()
