#!/usr/bin/env python3
# import os
# os.environ["PYTHONUNBUFFERED"] = "1"
# os.environ["DFTPY_SAVEFFT"] = "1"

import argparse
from edftpy.interface import optimize_density_conf
from edftpy.config import read_conf, print_conf
import time
from dftpy.time_data import TimeData
from dftpy.formats.io import write
#-----------------------------------------------------------------------
from edftpy.enginer.ks_pwscf import PwscfKS
# from edftpy.enginer.ks_castep import CastepKS
from edftpy.enginer.of_dftpy import DFTpyOF
#-----------------------------------------------------------------------

def GetConf():
    parser = argparse.ArgumentParser(description='Process task')
    parser.add_argument('confs', nargs = '*')
    parser.add_argument('-i', '--ini', '--input', dest='input', type=str, action='store',
            default='config.ini', help='Input file (default: config.ini)')
    parser.add_argument('--mpi', '--mpi4py', dest='mpi', action='store_true',
            default=False, help='Use mpi4py to be parallel')

    args = parser.parse_args()
    if args.mpi :
        from mpi4py import MPI
        from mpi4py_fft import PFFT
        from edftpy.mpi import graphtopo
        graphtopo.comm = MPI.COMM_WORLD
    return args


def RunJob(args):
    from edftpy.mpi import graphtopo, sprint
    sprint("Begin on :", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    if graphtopo.is_mpi :
        info = 'Parallel version (MPI) on {0:>8d} processors'.format(graphtopo.comm.size)
    else :
        info = 'Serial version on {0:>8d} processors'.format(graphtopo.comm.size)
    sprint(info)
    if len(args.confs) == 0 :
        args.confs.append(args.input)
    for fname in args.confs:
        config = read_conf(fname)
        # print_conf(config, comm = graphtopo.comm)

        sprint("#" * 80)
        TimeData.Begin("TOTAL")

        optimizer = optimize_density_conf(config, graphtopo = graphtopo)

        TimeData.End("TOTAL")
        if graphtopo.rank == 0 :
            TimeData.output(config)
        sprint("-" * 80)
        #-----------------------------------------------------------------------
        if config["GSYSTEM"]["density"]['output']:
            sprint("Write Density...")
            outfile = config["GSYSTEM"]["density"]['output']
            write(outfile, optimizer.density, ions = optimizer.gsystem.ions)
        if config["OUTPUT"]["electrostatic_potential"]:
            sprint("Write electrostatic potential...")
            outfile = config["OUTPUT"]["electrostatic_potential"]
            vloc = optimizer.gsystem.total_evaluator.funcdicts['PSEUDO']
            vhart = optimizer.gsystem.total_evaluator.funcdicts['HARTREE']
            v = vloc(optimizer.density, calcType = ['V']).potential + vhart(optimizer.density, calcType = ['V']).potential
            write(outfile, v, ions = optimizer.gsystem.ions)
        #-----------------------------------------------------------------------
    sprint("#" * 80)
    sprint("Finished on :", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))


if __name__ == "__main__":
    args = GetConf()
    RunJob(args)
