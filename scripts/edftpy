#!/usr/bin/env python3
import os
# os.environ["PYTHONUNBUFFERED"] = "1"
# os.environ["DFTPY_SAVEFFT"] = "1"

import argparse
from edftpy.interface import optimize_density_conf
from edftpy.config import read_conf, print_conf
import time
from dftpy.time_data import TimeData
from dftpy.formats.io import write


def RunJob():
    print("Begin on :", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    parser = argparse.ArgumentParser(description='Process task')
    parser.add_argument('confs', nargs = '*')
    parser.add_argument('-i', '--ini', '--input', dest='input', type=str, action='store',
            default='config.ini', help='input file (default: config.ini)')

    args = parser.parse_args()
    if len(args.confs) == 0 :
        args.confs.append(args.input)
    for fname in args.confs:
        config = read_conf(fname)
        print_conf(config)

        print("#" * 80)
        TimeData.Begin("TOTAL")

        optimizer = optimize_density_conf(config)

        TimeData.End("TOTAL")
        TimeData.output(config)
        print("-" * 80)
        #-----------------------------------------------------------------------
        if config["GSYSTEM"]["density"]['output']:
            print("Write Density...")
            outfile = config["GSYSTEM"]["density"]['output']
            write(outfile, optimizer.density, ions = optimizer.gsystem.ions)
        if config["OUTPUT"]["electrostatic_potential"]:
            print("Write electrostatic potential...")
            outfile = config["OUTPUT"]["electrostatic_potential"]
            vloc = optimizer.gsystem.total_evaluator.funcdicts['PSEUDO']
            vhart = optimizer.gsystem.total_evaluator.funcdicts['HARTREE']
            v = vloc(optimizer.density, calcType = ['V']).potential + vhart(optimizer.density, calcType = ['V']).potential
            write(outfile, v, ions = optimizer.gsystem.ions)
        #-----------------------------------------------------------------------
    print("#" * 80)
    print("Finished on :", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))


if __name__ == "__main__":
    RunJob()
